# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  developer_reviews(
    where: DeveloperReviewWhereInput! = {}
    orderBy: [DeveloperReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperReview!]
  developer_reviewsCount(where: DeveloperReviewWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  developer_reviews: DeveloperReviewManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DeveloperReviewManyRelationFilter {
  every: DeveloperReviewWhereInput
  some: DeveloperReviewWhereInput
  none: DeveloperReviewWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  developer_reviews: DeveloperReviewRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input DeveloperReviewRelateToManyForUpdateInput {
  disconnect: [DeveloperReviewWhereUniqueInput!]
  set: [DeveloperReviewWhereUniqueInput!]
  create: [DeveloperReviewCreateInput!]
  connect: [DeveloperReviewWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  developer_reviews: DeveloperReviewRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input DeveloperReviewRelateToManyForCreateInput {
  create: [DeveloperReviewCreateInput!]
  connect: [DeveloperReviewWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  likes(
    where: LikeWhereInput! = {}
    orderBy: [LikeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Like!]
  likesCount(where: LikeWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  likes: LikeManyRelationFilter
  comments: CommentManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input LikeManyRelationFilter {
  every: LikeWhereInput
  some: LikeWhereInput
  none: LikeWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  likes: LikeRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input LikeRelateToManyForUpdateInput {
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  create: [LikeCreateInput!]
  connect: [LikeWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  likes: LikeRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input LikeRelateToManyForCreateInput {
  create: [LikeCreateInput!]
  connect: [LikeWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Comment {
  id: ID!
  name: String
  comment: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  name: StringFilter
  comment: StringFilter
  posts: PostManyRelationFilter
}

input CommentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  comment: OrderDirection
}

input CommentUpdateInput {
  name: String
  comment: String
  posts: PostRelateToManyForUpdateInput
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  name: String
  comment: String
  posts: PostRelateToManyForCreateInput
}

type Image {
  id: ID!
  name: String
  image: ImageFieldOutput
  publishDate: DateTime
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  publishDate: DateTimeNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  publishDate: OrderDirection
}

input ImageUpdateInput {
  name: String
  image: ImageFieldInput
  publishDate: DateTime
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  image: ImageFieldInput
  publishDate: DateTime
}

type Like {
  id: ID!
  user_id: String
  liked: Boolean
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input LikeWhereUniqueInput {
  id: ID
  user_id: String
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
  id: IDFilter
  user_id: StringFilter
  liked: BooleanFilter
  posts: PostManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input LikeOrderByInput {
  id: OrderDirection
  user_id: OrderDirection
  liked: OrderDirection
}

input LikeUpdateInput {
  user_id: String
  liked: Boolean
  posts: PostRelateToManyForUpdateInput
}

input LikeUpdateArgs {
  where: LikeWhereUniqueInput!
  data: LikeUpdateInput!
}

input LikeCreateInput {
  user_id: String
  liked: Boolean
  posts: PostRelateToManyForCreateInput
}

type DeveloperReview {
  id: ID!
  title: String
  status: String
  content: DeveloperReview_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: DeveloperTagWhereInput! = {}
    orderBy: [DeveloperTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperTag!]
  tagsCount(where: DeveloperTagWhereInput! = {}): Int
  likes(
    where: DeveloperLikeWhereInput! = {}
    orderBy: [DeveloperLikeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperLike!]
  likesCount(where: DeveloperLikeWhereInput! = {}): Int
  comments(
    where: DeveloperCommentWhereInput! = {}
    orderBy: [DeveloperCommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperComment!]
  commentsCount(where: DeveloperCommentWhereInput! = {}): Int
  socials: DeveloperSocial
}

type DeveloperReview_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input DeveloperReviewWhereUniqueInput {
  id: ID
}

input DeveloperReviewWhereInput {
  AND: [DeveloperReviewWhereInput!]
  OR: [DeveloperReviewWhereInput!]
  NOT: [DeveloperReviewWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: DeveloperTagManyRelationFilter
  likes: DeveloperLikeManyRelationFilter
  comments: DeveloperCommentManyRelationFilter
  socials: DeveloperSocialWhereInput
}

input DeveloperTagManyRelationFilter {
  every: DeveloperTagWhereInput
  some: DeveloperTagWhereInput
  none: DeveloperTagWhereInput
}

input DeveloperLikeManyRelationFilter {
  every: DeveloperLikeWhereInput
  some: DeveloperLikeWhereInput
  none: DeveloperLikeWhereInput
}

input DeveloperCommentManyRelationFilter {
  every: DeveloperCommentWhereInput
  some: DeveloperCommentWhereInput
  none: DeveloperCommentWhereInput
}

input DeveloperReviewOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input DeveloperReviewUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: DeveloperTagRelateToManyForUpdateInput
  likes: DeveloperLikeRelateToManyForUpdateInput
  comments: DeveloperCommentRelateToManyForUpdateInput
  socials: DeveloperSocialRelateToOneForUpdateInput
}

input DeveloperTagRelateToManyForUpdateInput {
  disconnect: [DeveloperTagWhereUniqueInput!]
  set: [DeveloperTagWhereUniqueInput!]
  create: [DeveloperTagCreateInput!]
  connect: [DeveloperTagWhereUniqueInput!]
}

input DeveloperLikeRelateToManyForUpdateInput {
  disconnect: [DeveloperLikeWhereUniqueInput!]
  set: [DeveloperLikeWhereUniqueInput!]
  create: [DeveloperLikeCreateInput!]
  connect: [DeveloperLikeWhereUniqueInput!]
}

input DeveloperCommentRelateToManyForUpdateInput {
  disconnect: [DeveloperCommentWhereUniqueInput!]
  set: [DeveloperCommentWhereUniqueInput!]
  create: [DeveloperCommentCreateInput!]
  connect: [DeveloperCommentWhereUniqueInput!]
}

input DeveloperSocialRelateToOneForUpdateInput {
  create: DeveloperSocialCreateInput
  connect: DeveloperSocialWhereUniqueInput
  disconnect: Boolean
}

input DeveloperReviewUpdateArgs {
  where: DeveloperReviewWhereUniqueInput!
  data: DeveloperReviewUpdateInput!
}

input DeveloperReviewCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: DeveloperTagRelateToManyForCreateInput
  likes: DeveloperLikeRelateToManyForCreateInput
  comments: DeveloperCommentRelateToManyForCreateInput
  socials: DeveloperSocialRelateToOneForCreateInput
}

input DeveloperTagRelateToManyForCreateInput {
  create: [DeveloperTagCreateInput!]
  connect: [DeveloperTagWhereUniqueInput!]
}

input DeveloperLikeRelateToManyForCreateInput {
  create: [DeveloperLikeCreateInput!]
  connect: [DeveloperLikeWhereUniqueInput!]
}

input DeveloperCommentRelateToManyForCreateInput {
  create: [DeveloperCommentCreateInput!]
  connect: [DeveloperCommentWhereUniqueInput!]
}

input DeveloperSocialRelateToOneForCreateInput {
  create: DeveloperSocialCreateInput
  connect: DeveloperSocialWhereUniqueInput
}

type DeveloperSocial {
  id: ID!
  twitch: String
  twitter: String
  discord: String
  developer_reviews: DeveloperReview
}

input DeveloperSocialWhereUniqueInput {
  id: ID
}

input DeveloperSocialWhereInput {
  AND: [DeveloperSocialWhereInput!]
  OR: [DeveloperSocialWhereInput!]
  NOT: [DeveloperSocialWhereInput!]
  id: IDFilter
  twitch: StringFilter
  twitter: StringFilter
  discord: StringFilter
  developer_reviews: DeveloperReviewWhereInput
}

input DeveloperSocialOrderByInput {
  id: OrderDirection
  twitch: OrderDirection
  twitter: OrderDirection
  discord: OrderDirection
}

input DeveloperSocialUpdateInput {
  twitch: String
  twitter: String
  discord: String
  developer_reviews: DeveloperReviewRelateToOneForUpdateInput
}

input DeveloperReviewRelateToOneForUpdateInput {
  create: DeveloperReviewCreateInput
  connect: DeveloperReviewWhereUniqueInput
  disconnect: Boolean
}

input DeveloperSocialUpdateArgs {
  where: DeveloperSocialWhereUniqueInput!
  data: DeveloperSocialUpdateInput!
}

input DeveloperSocialCreateInput {
  twitch: String
  twitter: String
  discord: String
  developer_reviews: DeveloperReviewRelateToOneForCreateInput
}

input DeveloperReviewRelateToOneForCreateInput {
  create: DeveloperReviewCreateInput
  connect: DeveloperReviewWhereUniqueInput
}

type DeveloperTag {
  id: ID!
  name: String
  developer_reviews(
    where: DeveloperReviewWhereInput! = {}
    orderBy: [DeveloperReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperReview!]
  developer_reviewsCount(where: DeveloperReviewWhereInput! = {}): Int
}

input DeveloperTagWhereUniqueInput {
  id: ID
}

input DeveloperTagWhereInput {
  AND: [DeveloperTagWhereInput!]
  OR: [DeveloperTagWhereInput!]
  NOT: [DeveloperTagWhereInput!]
  id: IDFilter
  name: StringFilter
  developer_reviews: DeveloperReviewManyRelationFilter
}

input DeveloperTagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input DeveloperTagUpdateInput {
  name: String
  developer_reviews: DeveloperReviewRelateToManyForUpdateInput
}

input DeveloperTagUpdateArgs {
  where: DeveloperTagWhereUniqueInput!
  data: DeveloperTagUpdateInput!
}

input DeveloperTagCreateInput {
  name: String
  developer_reviews: DeveloperReviewRelateToManyForCreateInput
}

type DeveloperComment {
  id: ID!
  name: String
  comment: String
  developer_reviews(
    where: DeveloperReviewWhereInput! = {}
    orderBy: [DeveloperReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperReview!]
  developer_reviewsCount(where: DeveloperReviewWhereInput! = {}): Int
}

input DeveloperCommentWhereUniqueInput {
  id: ID
}

input DeveloperCommentWhereInput {
  AND: [DeveloperCommentWhereInput!]
  OR: [DeveloperCommentWhereInput!]
  NOT: [DeveloperCommentWhereInput!]
  id: IDFilter
  name: StringFilter
  comment: StringFilter
  developer_reviews: DeveloperReviewManyRelationFilter
}

input DeveloperCommentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  comment: OrderDirection
}

input DeveloperCommentUpdateInput {
  name: String
  comment: String
  developer_reviews: DeveloperReviewRelateToManyForUpdateInput
}

input DeveloperCommentUpdateArgs {
  where: DeveloperCommentWhereUniqueInput!
  data: DeveloperCommentUpdateInput!
}

input DeveloperCommentCreateInput {
  name: String
  comment: String
  developer_reviews: DeveloperReviewRelateToManyForCreateInput
}

type DeveloperLike {
  id: ID!
  user_id: String
  liked: Boolean
  developer_reviews(
    where: DeveloperReviewWhereInput! = {}
    orderBy: [DeveloperReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperReview!]
  developer_reviewsCount(where: DeveloperReviewWhereInput! = {}): Int
}

input DeveloperLikeWhereUniqueInput {
  id: ID
  user_id: String
}

input DeveloperLikeWhereInput {
  AND: [DeveloperLikeWhereInput!]
  OR: [DeveloperLikeWhereInput!]
  NOT: [DeveloperLikeWhereInput!]
  id: IDFilter
  user_id: StringFilter
  liked: BooleanFilter
  developer_reviews: DeveloperReviewManyRelationFilter
}

input DeveloperLikeOrderByInput {
  id: OrderDirection
  user_id: OrderDirection
  liked: OrderDirection
}

input DeveloperLikeUpdateInput {
  user_id: String
  liked: Boolean
  developer_reviews: DeveloperReviewRelateToManyForUpdateInput
}

input DeveloperLikeUpdateArgs {
  where: DeveloperLikeWhereUniqueInput!
  data: DeveloperLikeUpdateInput!
}

input DeveloperLikeCreateInput {
  user_id: String
  liked: Boolean
  developer_reviews: DeveloperReviewRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createLike(data: LikeCreateInput!): Like
  createLikes(data: [LikeCreateInput!]!): [Like]
  updateLike(where: LikeWhereUniqueInput!, data: LikeUpdateInput!): Like
  updateLikes(data: [LikeUpdateArgs!]!): [Like]
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteLikes(where: [LikeWhereUniqueInput!]!): [Like]
  createDeveloperReview(data: DeveloperReviewCreateInput!): DeveloperReview
  createDeveloperReviews(
    data: [DeveloperReviewCreateInput!]!
  ): [DeveloperReview]
  updateDeveloperReview(
    where: DeveloperReviewWhereUniqueInput!
    data: DeveloperReviewUpdateInput!
  ): DeveloperReview
  updateDeveloperReviews(data: [DeveloperReviewUpdateArgs!]!): [DeveloperReview]
  deleteDeveloperReview(
    where: DeveloperReviewWhereUniqueInput!
  ): DeveloperReview
  deleteDeveloperReviews(
    where: [DeveloperReviewWhereUniqueInput!]!
  ): [DeveloperReview]
  createDeveloperSocial(data: DeveloperSocialCreateInput!): DeveloperSocial
  createDeveloperSocials(
    data: [DeveloperSocialCreateInput!]!
  ): [DeveloperSocial]
  updateDeveloperSocial(
    where: DeveloperSocialWhereUniqueInput!
    data: DeveloperSocialUpdateInput!
  ): DeveloperSocial
  updateDeveloperSocials(data: [DeveloperSocialUpdateArgs!]!): [DeveloperSocial]
  deleteDeveloperSocial(
    where: DeveloperSocialWhereUniqueInput!
  ): DeveloperSocial
  deleteDeveloperSocials(
    where: [DeveloperSocialWhereUniqueInput!]!
  ): [DeveloperSocial]
  createDeveloperTag(data: DeveloperTagCreateInput!): DeveloperTag
  createDeveloperTags(data: [DeveloperTagCreateInput!]!): [DeveloperTag]
  updateDeveloperTag(
    where: DeveloperTagWhereUniqueInput!
    data: DeveloperTagUpdateInput!
  ): DeveloperTag
  updateDeveloperTags(data: [DeveloperTagUpdateArgs!]!): [DeveloperTag]
  deleteDeveloperTag(where: DeveloperTagWhereUniqueInput!): DeveloperTag
  deleteDeveloperTags(where: [DeveloperTagWhereUniqueInput!]!): [DeveloperTag]
  createDeveloperComment(data: DeveloperCommentCreateInput!): DeveloperComment
  createDeveloperComments(
    data: [DeveloperCommentCreateInput!]!
  ): [DeveloperComment]
  updateDeveloperComment(
    where: DeveloperCommentWhereUniqueInput!
    data: DeveloperCommentUpdateInput!
  ): DeveloperComment
  updateDeveloperComments(
    data: [DeveloperCommentUpdateArgs!]!
  ): [DeveloperComment]
  deleteDeveloperComment(
    where: DeveloperCommentWhereUniqueInput!
  ): DeveloperComment
  deleteDeveloperComments(
    where: [DeveloperCommentWhereUniqueInput!]!
  ): [DeveloperComment]
  createDeveloperLike(data: DeveloperLikeCreateInput!): DeveloperLike
  createDeveloperLikes(data: [DeveloperLikeCreateInput!]!): [DeveloperLike]
  updateDeveloperLike(
    where: DeveloperLikeWhereUniqueInput!
    data: DeveloperLikeUpdateInput!
  ): DeveloperLike
  updateDeveloperLikes(data: [DeveloperLikeUpdateArgs!]!): [DeveloperLike]
  deleteDeveloperLike(where: DeveloperLikeWhereUniqueInput!): DeveloperLike
  deleteDeveloperLikes(
    where: [DeveloperLikeWhereUniqueInput!]!
  ): [DeveloperLike]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  likes(
    where: LikeWhereInput! = {}
    orderBy: [LikeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Like!]
  like(where: LikeWhereUniqueInput!): Like
  likesCount(where: LikeWhereInput! = {}): Int
  developerReviews(
    where: DeveloperReviewWhereInput! = {}
    orderBy: [DeveloperReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperReview!]
  developerReview(where: DeveloperReviewWhereUniqueInput!): DeveloperReview
  developerReviewsCount(where: DeveloperReviewWhereInput! = {}): Int
  developerSocials(
    where: DeveloperSocialWhereInput! = {}
    orderBy: [DeveloperSocialOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperSocial!]
  developerSocial(where: DeveloperSocialWhereUniqueInput!): DeveloperSocial
  developerSocialsCount(where: DeveloperSocialWhereInput! = {}): Int
  developerTags(
    where: DeveloperTagWhereInput! = {}
    orderBy: [DeveloperTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperTag!]
  developerTag(where: DeveloperTagWhereUniqueInput!): DeveloperTag
  developerTagsCount(where: DeveloperTagWhereInput! = {}): Int
  developerComments(
    where: DeveloperCommentWhereInput! = {}
    orderBy: [DeveloperCommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperComment!]
  developerComment(where: DeveloperCommentWhereUniqueInput!): DeveloperComment
  developerCommentsCount(where: DeveloperCommentWhereInput! = {}): Int
  developerLikes(
    where: DeveloperLikeWhereInput! = {}
    orderBy: [DeveloperLikeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeveloperLike!]
  developerLike(where: DeveloperLikeWhereUniqueInput!): DeveloperLike
  developerLikesCount(where: DeveloperLikeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
