// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                String            @id @default(cuid())
  name              String            @default("")
  email             String            @unique @default("")
  password          String
  posts             Post[]            @relation("Post_author")
  developer_reviews DeveloperReview[] @relation("DeveloperReview_author")
}

model Post {
  id          String    @id @default(cuid())
  title       String    @default("")
  status      String?   @default("draft")
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  tags        Tag[]     @relation("Post_tags")
  likes       Like[]    @relation("Like_posts")
  comments    Comment[] @relation("Comment_posts")

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}

model Comment {
  id      String @id @default(cuid())
  name    String @default("")
  comment String @default("")
  posts   Post[] @relation("Comment_posts")
}

model Image {
  id              String    @id @default(cuid())
  name            String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  publishDate     DateTime?
}

model Like {
  id      String  @id @default(cuid())
  user_id String  @unique @default("")
  liked   Boolean @default(false)
  posts   Post[]  @relation("Like_posts")
}

model DeveloperReview {
  id          String             @id @default(cuid())
  title       String             @default("")
  status      String?            @default("draft")
  content     Json               @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?              @relation("DeveloperReview_author", fields: [authorId], references: [id])
  authorId    String?            @map("author")
  tags        DeveloperTag[]     @relation("DeveloperReview_tags")
  likes       DeveloperLike[]    @relation("DeveloperLike_developer_reviews")
  comments    DeveloperComment[] @relation("DeveloperComment_developer_reviews")
  socials     DeveloperSocial?   @relation("DeveloperReview_socials", fields: [socialsId], references: [id])
  socialsId   String?            @unique @map("socials")

  @@index([authorId])
}

model DeveloperSocial {
  id                String           @id @default(cuid())
  twitch            String           @default("")
  twitter           String           @default("")
  discord           String           @default("")
  developer_reviews DeveloperReview? @relation("DeveloperReview_socials")
}

model DeveloperTag {
  id                String            @id @default(cuid())
  name              String            @default("")
  developer_reviews DeveloperReview[] @relation("DeveloperReview_tags")
}

model DeveloperComment {
  id                String            @id @default(cuid())
  name              String            @default("")
  comment           String            @default("")
  developer_reviews DeveloperReview[] @relation("DeveloperComment_developer_reviews")
}

model DeveloperLike {
  id                String            @id @default(cuid())
  user_id           String            @unique @default("")
  liked             Boolean           @default(false)
  developer_reviews DeveloperReview[] @relation("DeveloperLike_developer_reviews")
}